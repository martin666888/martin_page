{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u535a\u5ba2 \ud83d\udc4b","text":"<p>\u8fd9\u91cc\u8bb0\u5f55\u6211\u5728\u5b66\u4e60\u3001\u63a2\u7d22\u4e0e\u5b9e\u8df5\u4e2d\u7684\u6240\u601d\u6240\u60f3\u3002</p> <p>\u535a\u5ba2\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u5411\uff1a</p> <ul> <li>\u786c\u4ef6\u5f00\u53d1\uff1a\u8bb0\u5f55\u4ece\u539f\u7406\u56fe\u3001\u7535\u8def\u8bbe\u8ba1\u5230\u5d4c\u5165\u5f0f\u5f00\u53d1\u7684\u70b9\u6ef4</li> <li>AI \u5de5\u5177\u4f7f\u7528\uff1a\u63a2\u7d22 ChatGPT\u3001Midjourney\u3001Notion AI \u7b49\u5b9e\u7528\u5de5\u5177</li> <li>\u7075\u611f\u8bb0\u5f55\uff1a\u5199\u7ed9\u81ea\u5df1\u7684\u968f\u7b14\u3001\u53cd\u601d\u4e0e\u788e\u7247\u60f3\u6cd5</li> </ul> <p>\u6301\u7eed\u66f4\u65b0\u4e2d\uff0c\u611f\u8c22\u4f60\u7684\u5230\u6765\uff5e</p>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%20client/","title":"\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684mcp client","text":"<p>\u80fd\u521b\u5efa mcp server \u5c31\u80fd\u521b\u5efa\u4e00\u4e2a mcp client\uff0c\u4f46\u56e0\u4e3a\u9700\u8981\u5904\u7406\u5927\u6a21\u578b\u7684\u4e0a\u4e0b\u8f93\u5165\u4ee5\u53ca api\uff0c \u5b9e\u73b0\u7ec6\u8282\u4e0a\u4f1a\u6bd4 server \u8981\u590d\u6742\u4e00\u70b9\u3002</p> <p>\u53c2\u8003\u5b98\u65b9\u6559\u7a0b</p> <p>\u5b98\u65b9\u6559\u7a0b</p> <p>\u6211\u4eec\u8fd8\u662f\u80fd\u591f\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u5bf9\u8bdd\u5f0f mcp client\u3002</p>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%20client/#_1","title":"\u51c6\u5907\u5de5\u4f5c","text":"<p>\u4e4b\u524d\u5df2\u7ecf\u5f00\u53d1\u8fc7 mcp server\uff0c\u6240\u4ee5\u73af\u5883\u4e4b\u7c7b\u7684\u914d\u7f6e\u5e94\u8be5\u5df2\u7ecf\u5f88\u719f\u6089\u4e86\uff0c\u6211\u4eec\u8fd8\u662f\u4f7f\u7528 uv \u8fdb\u884c\u73af\u5883\u90e8\u7f72\u548c\u5f00\u53d1\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002</p> <p>\u4e3a\u4e86\u4f7f\u7528 OpenAI \u517c\u5bb9\u7684\u5927\u6a21\u578b\u63a5\u53e3\uff0c\u6211\u4eec\u9700\u8981\u518d\u7279\u522b\u5f15\u5165 openai \u5e93\u3002</p> <pre><code>from openai import OpenAI\n</code></pre>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%20client/#mcp-server","title":"\u5bf9\u63a5 mcp server","text":"<p>\u786e\u4fdd\u4f60\u6709\u4e00\u4e2a\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5\u7684 mcp server\uff0c\u4e3a\u4e86\u7b80\u5355\u65b9\u4fbf\u6211\u8fd9\u91cc\u5c31\u662f\u7528\u4e4b\u524d\u5df2\u7ecf\u521b\u5efa\u597d\u7684\u201c\u5947\u602a\u7b97\u6cd5\u201d\u7684 server \u7528\u6765\u6f14\u793a\u3002</p>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%20client/#_2","title":"\u5b8c\u6574\u4ee3\u7801","text":"<p>\u4e3a\u4e86\u8ba9\u4f60\u6709\u4e00\u4e2a\u5b8f\u89c2\u7684\u8ba4\u8bc6\uff0c\u8fd9\u91cc\u5148\u628a\u5b8c\u6574\u4ee3\u7801\u653e\u51fa\u6765\uff1a</p> <pre><code>import asyncio\nimport sys\nimport json\nimport signal\nfrom typing import Optional, List\nfrom contextlib import AsyncExitStack\n\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\nfrom openai import OpenAI\n\n# \u5168\u5c40 API \u914d\u7f6e\nAPI_CONFIG = {\n    \"api_key\": \"your-api-key-here\",\n    \"api_base\": \"API base url\",     # \u6216\u5176\u4ed6\u652f\u6301OpenAI\u517c\u5bb9API\u7684\u670d\u52a1\n    \"model\": \"\u6a21\u578b\u540d\u79f0\"              # \u6839\u636e\u60a8\u4f7f\u7528\u7684API\u63d0\u4f9b\u5546\u8fdb\u884c\u8c03\u6574\n}\n\nclass MCPClient:\n    def __init__(self):\n        # \u521d\u59cb\u5316\u4f1a\u8bdd\u548c\u5ba2\u6237\u7aef\u5bf9\u8c61\n        self.session: Optional[ClientSession] = None\n        self.exit_stack = AsyncExitStack()\n        self.pending_tasks: List[asyncio.Task] = []\n\n        # \u521d\u59cb\u5316OpenAI\u5ba2\u6237\u7aef\n        self.client = OpenAI(\n            api_key=API_CONFIG[\"api_key\"],\n            base_url=API_CONFIG[\"api_base\"]\n        )\n\n    async def connect_to_server(self, server_script_path: str):\n        \"\"\"\u8fde\u63a5\u5230MCP\u670d\u52a1\u5668\"\"\"\n        is_python = server_script_path.endswith('.py')\n        is_js = server_script_path.endswith('.js')\n\n        if not (is_python or is_js):\n            raise ValueError(\"\u670d\u52a1\u5668\u811a\u672c\u5fc5\u987b\u662f.py\u6216.js\u6587\u4ef6\")\n\n        command = \"python\" if is_python else \"node\"\n        server_params = StdioServerParameters(\n            command=command,\n            args=[server_script_path],\n            env=None\n        )\n\n        stdio_transport = await self.exit_stack.enter_async_context(stdio_client(server_params))\n        self.stdio, self.write = stdio_transport\n        self.session = await self.exit_stack.enter_async_context(ClientSession(self.stdio, self.write))\n        await self.session.initialize()\n\n        # \u5217\u51fa\u53ef\u7528\u5de5\u5177\n        response = await self.session.list_tools()\n        tools = response.tools\n        print(\"\\n\u5df2\u8fde\u63a5\u5230\u670d\u52a1\u5668\uff0c\u53ef\u7528\u5de5\u5177:\", [tool.name for tool in tools])\n\n    async def process_query(self, query: str) -&gt; str:\n        \"\"\"\u4f7f\u7528OpenAI\u517c\u5bb9 API\u548c\u53ef\u7528\u5de5\u5177\u5904\u7406\u67e5\u8be2\"\"\"\n        messages = [\n            {\n                \"role\": \"user\",\n                \"content\": query\n            }\n        ]\n\n        response = await self.session.list_tools()\n        available_tools = [{\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": tool.name,\n                \"description\": tool.description,\n                \"parameters\": tool.inputSchema\n            }\n        } for tool in response.tools]\n\n        # \u521d\u59cbAPI\u8c03\u7528\n        try:\n            response = self.client.chat.completions.create(\n                model=API_CONFIG[\"model\"],\n                messages=messages,\n                tools=available_tools,\n                tool_choice=\"auto\"\n            )\n\n            # \u5904\u7406\u54cd\u5e94\n            final_text = []\n\n            # \u83b7\u53d6\u6a21\u578b\u7684\u54cd\u5e94\n            message = response.choices[0].message\n            if message.content:\n                final_text.append(message.content)\n\n            # \u5904\u7406\u5de5\u5177\u8c03\u7528\n            if hasattr(message, 'tool_calls') and message.tool_calls:\n                for tool_call in message.tool_calls:\n                    tool_name = tool_call.function.name\n                    tool_args = json.loads(tool_call.function.arguments)\n\n                    # \u6253\u5370\u8c03\u8bd5\u4fe1\u606f\n                    print(f\"\u5de5\u5177\u8c03\u7528: {tool_name}, \u53c2\u6570: {tool_args}\")\n\n                    # \u6267\u884c\u5de5\u5177\u8c03\u7528\n                    result = await self.session.call_tool(tool_name, tool_args)\n                    final_text.append(f\"[\u8c03\u7528\u5de5\u5177 {tool_name}\uff0c\u53c2\u6570 {tool_args}]\")\n\n                    # \u8fd4\u56de\u5de5\u5177\u8c03\u7528\u7ed3\u679c\n                    tool_result = str(result.content)\n\n                    # \u6dfb\u52a0\u52a9\u624b\u6d88\u606f\u548c\u5de5\u5177\u7ed3\u679c\u5230\u4e0a\u4e0b\u6587\n                    messages.append({\n                        \"role\": \"assistant\",\n                        \"content\": None,\n                        \"tool_calls\": [\n                            {\n                                \"id\": tool_call.id,\n                                \"type\": \"function\",\n                                \"function\": {\n                                    \"name\": tool_name,\n                                    \"arguments\": tool_call.function.arguments\n                                }\n                            }\n                        ]\n                    })\n\n                    # \u786e\u4fdd\u5de5\u5177\u54cd\u5e94\u683c\u5f0f\u6b63\u786e\n                    messages.append({\n                        \"role\": \"tool\",\n                        \"tool_call_id\": tool_call.id,\n                        \"content\": tool_result  # \u4f7f\u7528\u5b57\u7b26\u4e32\n                    })\n\n                    # \u6253\u5370\u8c03\u8bd5\u4fe1\u606f\n                    print(\"\u53d1\u9001\u5230API\u7684\u6d88\u606f\u7ed3\u6784:\")\n                    print(json.dumps(messages, indent=2))\n\n                    # \u83b7\u53d6\u4e0b\u4e00\u4e2a\u54cd\u5e94 - \u4f7f\u7528\u76f8\u540c\u7684\u6a21\u578b\n                    try:\n                        second_response = self.client.chat.completions.create(\n                            model=API_CONFIG[\"model\"],  # \u4f7f\u7528\u5168\u5c40\u914d\u7f6e\u7684\u6a21\u578b\n                            messages=messages,\n                            tools=available_tools,\n                            tool_choice=\"auto\"\n                        )\n\n                        next_message = second_response.choices[0].message\n                        if next_message.content:\n                            final_text.append(next_message.content)\n                    except Exception as e:\n                        final_text.append(f\"\u83b7\u53d6\u6700\u7ec8\u54cd\u5e94\u65f6\u51fa\u9519: {str(e)}\")\n                        print(f\"\u83b7\u53d6\u6700\u7ec8\u54cd\u5e94\u65f6\u51fa\u9519: {str(e)}\")\n\n            return \"\\n\".join(final_text)\n\n        except Exception as e:\n            return f\"API\u8c03\u7528\u51fa\u9519: {str(e)}\"\n\n    async def chat_loop(self):\n        \"\"\"\u8fd0\u884c\u4ea4\u4e92\u5f0f\u804a\u5929\u5faa\u73af\"\"\"\n        print(\"\\nMCP\u5ba2\u6237\u7aef\u5df2\u542f\u52a8\uff01\")\n        print(\"\u8f93\u5165\u60a8\u7684\u67e5\u8be2\u6216'quit'\u9000\u51fa\u3002\")\n\n        while True:\n            try:\n                query = input(\"\\n\u67e5\u8be2: \").strip()\n                if query.lower() == 'quit':\n                    print(\"\u6b63\u5728\u6e05\u7406\u5e76\u9000\u51fa...\")\n                    break\n\n                response = await self.process_query(query)\n                print(\"\\n\" + response)\n            except Exception as e:\n                print(f\"\\n\u9519\u8bef: {str(e)}\")\n                import traceback\n                traceback.print_exc()\n\n    async def cleanup(self):\n        \"\"\"\u6e05\u7406\u8d44\u6e90\uff0c\u7b80\u5316\u7248\u672c\uff0c\u907f\u514d\u4e0eanyio\u51b2\u7a81\"\"\"\n        try:\n            # \u7b80\u5355\u5730\u5173\u95ed\u9000\u51fa\u6808\uff0c\u4e0d\u4f7f\u7528wait_for\n            await self.exit_stack.aclose()\n        except Exception as e:\n            # \u6355\u83b7\u4f46\u4e0d\u91cd\u65b0\u629b\u51fa\u5f02\u5e38\uff0c\u53ea\u662f\u8bb0\u5f55\u5b83\u4eec\n            print(f\"\u6e05\u7406\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5f02\u5e38 (\u53ef\u4ee5\u5ffd\u7565): {str(e)}\")\n\nasync def main():\n    if len(sys.argv) &lt; 2:\n        print(\"\u7528\u6cd5: python mcpclient.py &lt;\u670d\u52a1\u5668\u811a\u672c\u8def\u5f84&gt;\")\n        sys.exit(1)\n\n    client = MCPClient()\n\n    # Windows\u5e73\u53f0\u4e0d\u652f\u6301add_signal_handler\uff0c\u7701\u7565\u4fe1\u53f7\u5904\u7406\n\n    try:\n        await client.connect_to_server(sys.argv[1])\n        await client.chat_loop()\n    finally:\n        await client.cleanup()\n\nif __name__ == \"__main__\":\n    try:\n        asyncio.run(main())\n    except KeyboardInterrupt:\n        print(\"\\n\u7528\u6237\u4e2d\u65ad\uff0c\u7a0b\u5e8f\u9000\u51fa\")\n    except asyncio.CancelledError:\n        # \u6355\u83b7\u5e76\u5ffd\u7565\u53d6\u6d88\u9519\u8bef\n        print(\"\u7a0b\u5e8f\u88ab\u53d6\u6d88\uff0c\u6b63\u5e38\u9000\u51fa\")\n    except Exception as e:\n        print(f\"\u7a0b\u5e8f\u5f02\u5e38\u9000\u51fa: {str(e)}\")\n        import traceback\n        traceback.print_exc()  # \u6253\u5370\u8be6\u7ec6\u7684\u5f02\u5e38\u5806\u6808\uff0c\u4fbf\u4e8e\u8c03\u8bd5\n</code></pre> <p>\u8fd9\u4e2a\u4ee3\u7801\u7684\u529f\u80fd\u5c31\u662f\u80fd\u5728\u7ec8\u7aef\u4e2d\u542f\u7528 mcp client\uff0c\u4f7f\u7528\u5355\u8f6e\u5bf9\u8bdd\u7684\u5f62\u5f0f\u4e0e ai \u5b8c\u6210\u4ea4\u4e92\u3002</p> <pre><code># \u5168\u5c40 API \u914d\u7f6e\nAPI_CONFIG = {\n    \"api_key\": \"your-api-key-here\",\n    \"api_base\": \"API base url\",     # \u6216\u5176\u4ed6\u652f\u6301OpenAI\u517c\u5bb9API\u7684\u670d\u52a1\n    \"model\": \"\u6a21\u578b\u540d\u79f0\"              # \u6839\u636e\u60a8\u4f7f\u7528\u7684API\u63d0\u4f9b\u5546\u8fdb\u884c\u8c03\u6574\n}\n</code></pre>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%20client/#_3","title":"\u57fa\u672c\u67b6\u6784","text":"<p>MCP \u5ba2\u6237\u7aef\u7684\u6838\u5fc3\u67b6\u6784\u5305\u62ec\u4ee5\u4e0b\u7ec4\u4ef6\uff1a</p> <p>\u25cf \u8fde\u63a5\u7ba1\u7406\uff1a\u4e0e MCP \u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5</p> <p>\u25cf \u6d88\u606f\u5904\u7406\uff1a\u53d1\u9001\u8bf7\u6c42\u548c\u63a5\u6536\u54cd\u5e94</p> <p>\u25cf \u5de5\u5177\u7ba1\u7406\uff1a\u5217\u51fa\u53ef\u7528\u5de5\u5177\u5e76\u5904\u7406\u5de5\u5177\u8c03\u7528</p> <p>\u25cf AI \u4ea4\u4e92\uff1a\u4e0e AI \u6a21\u578b\u901a\u4fe1</p> <p>\u25cf \u7528\u6237\u754c\u9762\uff1a\u63d0\u4f9b\u4e0e\u7528\u6237\u4ea4\u4e92\u7684\u65b9\u5f0f</p>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%20client/#_4","title":"\u5173\u952e\u4f9d\u8d56","text":"<pre><code>mcp==0.1.0  # MCP \u5ba2\u6237\u7aef\u5e93\nopenai==1.0.0\u4ee5\u4e0a  # \u652f\u6301 OpenAI \u517c\u5bb9API\u7684\u5ba2\u6237\u7aef\n</code></pre>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%20client/#_5","title":"\u6838\u5fc3\u4ee3\u7801\u7ed3\u6784","text":"<p>\u4e00\u4e2a\u6700\u5c0f\u5316\u7684 MCP \u5ba2\u6237\u7aef\u5e94\u5305\u62ec\uff1a</p>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%20client/#_6","title":"\u521d\u59cb\u5316\u548c\u914d\u7f6e","text":"<pre><code>class MCPClient:\n    def __init__(self):\n        # \u914d\u7f6e\u5ba2\u6237\u7aef\n        self.session = None  # MCP\u4f1a\u8bdd\n        self.exit_stack = AsyncExitStack()  # \u7528\u4e8e\u8d44\u6e90\u7ba1\u7406\n\n        # \u521d\u59cb\u5316API\u5ba2\u6237\u7aef\n        self.client = OpenAI(\n            api_key=\"your-api-key\",\n            base_url=\"https://api.provider.com\"\n        )\n</code></pre>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%20client/#_7","title":"\u8fde\u63a5\u5230\u670d\u52a1\u5668","text":"<pre><code>async def connect_to_server(self, server_script_path):\n    # \u786e\u5b9a\u811a\u672c\u7c7b\u578b\u548c\u542f\u52a8\u547d\u4ee4\n    command = \"python\" if server_script_path.endswith('.py') else \"node\"\n\n    # \u8bbe\u7f6e\u670d\u52a1\u5668\u53c2\u6570\n    server_params = StdioServerParameters(\n        command=command,\n        args=[server_script_path],\n        env=None\n    )\n\n    # \u5efa\u7acb\u8fde\u63a5\n    stdio_transport = await self.exit_stack.enter_async_context(stdio_client(server_params))\n    self.stdio, self.write = stdio_transport\n    self.session = await self.exit_stack.enter_async_context(ClientSession(self.stdio, self.write))\n    await self.session.initialize()\n\n    # \u5217\u51fa\u53ef\u7528\u5de5\u5177\n    response = await self.session.list_tools()\n    return response.tools\n</code></pre>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%20client/#_8","title":"\u5904\u7406\u67e5\u8be2","text":"<pre><code>async def process_query(self, query):\n    # \u51c6\u5907\u6d88\u606f\n    messages = [{\"role\": \"user\", \"content\": query}]\n\n    # \u83b7\u53d6\u53ef\u7528\u5de5\u5177\n    response = await self.session.list_tools()\n    available_tools = [...]  # \u8f6c\u6362\u4e3aAPI\u6240\u9700\u683c\u5f0f\n\n    # \u8c03\u7528AI\n    response = self.client.chat.completions.create(\n        model=\"model-name\",\n        messages=messages,\n        tools=available_tools,\n        tool_choice=\"auto\"\n    )\n\n    # \u5904\u7406\u54cd\u5e94\u548c\u5de5\u5177\u8c03\u7528\n    # \u5982\u679c\u5de5\u5177\u88ab\u8c03\u7528\uff0c\u6267\u884c\u5de5\u5177\u5e76\u5c06\u7ed3\u679c\u8fd4\u56de\u7ed9AI\n    # ...\n</code></pre>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%20client/#_9","title":"\u8d44\u6e90\u6e05\u7406","text":"<p>\u786e\u4fdd\u6b63\u786e\u6e05\u7406\u8d44\u6e90\u662f\u975e\u5e38\u91cd\u8981\u7684\uff1a</p> <pre><code>async def cleanup(self):\n    try:\n        await self.exit_stack.aclose()\n    except Exception as e:\n        print(f\"\u6e05\u7406\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u5f02\u5e38 (\u53ef\u4ee5\u5ffd\u7565): {str(e)}\")\n</code></pre>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%20client/#_10","title":"\u811a\u672c\u4f7f\u7528","text":"<p>\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u811a\u672c\uff0c\u4f46\u8bf7\u786e\u4fdd\u5df2\u7ecf\u6fc0\u6d3b\u4e86 uv \u73af\u5883\uff1a</p> <pre><code>.venv\\Scripts\\activate\n</code></pre> <p>\u6211\u4eec\u53ea\u53ef\u4ee5\u6307\u5b9a\u811a\u672c\u8981\u5bf9\u63a5\u7684 mcp server\uff0c\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\uff0c\u4f8b\u5982\u6211\u60f3\u8981\u5bf9\u63a5\u90a3\u4e2a\u5947\u602a\u7b97\u6cd5\u7684 server\uff1a</p> <pre><code>uv run python mcpclient.py ..\\mcpsample\\mcpsample.py\n</code></pre> <p>\u6d4b\u8bd5\u4e00\u4e0b\uff1a</p> <p></p> <p>\u8fd9\u4e2a client \u662f\u53ef\u4ee5\u8fd0\u884c\u7684\uff01</p>"},{"location":"AI%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/mcp%E4%BD%BF%E7%94%A8/","title":"ChatGPT\u6280\u5de7","text":"<p>mcp\u662f\u4e2a\u597d\u4e1c\u897f</p>"},{"location":"%E7%81%B5%E6%84%9F%E8%AE%B0%E5%BD%95/%E5%B8%B8%E5%B7%9E%E6%B8%B8%E8%AE%B0/","title":"\u5e38\u5dde\u6e38\u8bb0","text":"<p>\u6211\u5728\u5e38\u5dde\u611f\u5230\u5f88\u5f00\u5fc3\uff01</p>"},{"location":"%E7%81%B5%E6%84%9F%E8%AE%B0%E5%BD%95/%E9%9A%8F%E7%AC%94%E4%B8%80%E5%88%99/","title":"\u968f\u7b14\u4e00\u5219","text":"<p>\u4eca\u65e5\u6709\u4e9b\u75b2\u60eb\u54e6</p> <p>\u4eca\u5929\u662f2025\u5e744\u67082\u65e5\uff0c\u53c8\u662f\u60f3\u5ff5\u5c0f\u5b9d\u513f\u7684\u4e00\u5929</p>"},{"location":"%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/","title":"\u5165\u95e8\u6307\u5357","text":"<p>\u6211\u5565\u4e5f\u4e0d\u4f1a</p>"}]}